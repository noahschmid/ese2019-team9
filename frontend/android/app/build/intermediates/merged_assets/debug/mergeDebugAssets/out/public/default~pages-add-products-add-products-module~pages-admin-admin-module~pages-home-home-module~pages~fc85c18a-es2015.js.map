{"version":3,"sources":["./node_modules/ngx-captcha/fesm2015/ngx-captcha.js","./src/app/core/authentication/forgot-password/forgot-password.component.html","./src/app/core/authentication/login/login.component.html","./src/app/core/authentication/registration/registration.component.html","./src/app/core/header/header.component.html","./src/app/core/header/logo/logo.component.html","./src/app/core/header/navigation-bar/category-menu/category-menu.component.html","./src/app/core/header/navigation-bar/navigation-bar.component.html","./src/app/core/header/top-header/top-header-end/top-header-end.component.html","./src/app/core/header/top-header/top-header.component.html","./src/app/pages/home/home-banner/home-banner.component.html","./src/app/shared/components/input-form/input-form.component.html","./src/app/core/auth.module.ts","./src/app/core/authentication/forgot-password/forgot-password.component.scss","./src/app/core/authentication/forgot-password/forgot-password.component.ts","./src/app/core/authentication/login/login.component.scss","./src/app/core/authentication/login/login.component.ts","./src/app/core/authentication/registration/registration.component.scss","./src/app/core/authentication/registration/registration.component.ts","./src/app/core/header.module.ts","./src/app/core/header/header.component.scss","./src/app/core/header/header.component.ts","./src/app/core/header/logo/logo.component.scss","./src/app/core/header/logo/logo.component.ts","./src/app/core/header/navigation-bar/category-menu/category-menu.component.scss","./src/app/core/header/navigation-bar/category-menu/category-menu.component.ts","./src/app/core/header/navigation-bar/navigation-bar.component.scss","./src/app/core/header/navigation-bar/navigation-bar.component.ts","./src/app/core/header/top-header/top-header-end/top-header-end.component.scss","./src/app/core/header/top-header/top-header-end/top-header-end.component.ts","./src/app/core/header/top-header/top-header.component.scss","./src/app/core/header/top-header/top-header.component.ts","./src/app/core/services/popoverService/popover.service.ts","./src/app/pages/home/home-banner/home-banner.component.scss","./src/app/pages/home/home-banner/home-banner.component.ts","./src/app/shared/components/input-form/input-form.component.scss","./src/app/shared/components/input-form/input-form.component.ts","./src/app/shared/input-form.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiJ;AACnF;AACf;;AAE/C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yCAAyC,wDAAS;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,YAAY,OAAO,mDAAK,EAAE;AAC1B,UAAU,OAAO,mDAAK,EAAE;AACxB,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,eAAe,OAAO,oDAAM,EAAE;AAC9B,YAAY,OAAO,oDAAM,EAAE;AAC3B,aAAa,OAAO,oDAAM,EAAE;AAC5B,aAAa,OAAO,oDAAM,EAAE;AAC5B,aAAa,OAAO,oDAAM,EAAE;AAC5B,cAAc,OAAO,oDAAM,EAAE;AAC7B;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,8BAA8B,OAAO,2BAA2B,kCAAkC,UAAU,OAAO,EAAE,gCAAgC;AACrJ;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK;AACL;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,aAAa,OAAO,mDAAK,EAAE;AAC3B,UAAU,OAAO,mDAAK,EAAE;AACxB,0BAA0B,OAAO,uDAAS,gCAAgC,gBAAgB,IAAI;AAC9F;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK;AACL;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,YAAY,OAAO,mDAAK,EAAE;AAC1B,UAAU,OAAO,mDAAK,EAAE;AACxB,0BAA0B,OAAO,uDAAS,gCAAgC,gBAAgB,IAAI;AAC9F;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,gCAAgC;AA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","file":"default~pages-add-products-add-products-module~pages-admin-admin-module~pages-home-home-module~pages~fc85c18a-es2015.js","sourcesContent":["import { EventEmitter, Input, Output, Injectable, NgZone, Component, forwardRef, Renderer2, Injector, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass BaseReCaptchaComponent {\r\n    /**\r\n     * @protected\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = 'ngx_captcha_id_';\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = 'image';\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    ensureCaptchaElem(captchaElemId) {\r\n        /** @type {?} */\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        }));\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }), this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n        // create new wrapper for captcha\r\n        /** @type {?} */\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        }));\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\nBaseReCaptchaComponent.propDecorators = {\r\n    siteKey: [{ type: Input }],\r\n    useGlobalDomain: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    tabIndex: [{ type: Input }],\r\n    success: [{ type: Output }],\r\n    load: [{ type: Output }],\r\n    reset: [{ type: Output }],\r\n    ready: [{ type: Output }],\r\n    error: [{ type: Output }],\r\n    expire: [{ type: Output }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst ReCaptchaType = {\r\n    InvisibleReCaptcha: 0,\r\n    ReCaptcha2: 1,\r\n};\r\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\r\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ScriptService {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            }));\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**\r\n         * @return {?}\r\n         */\r\n        () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))))));\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cleanup() {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    grecaptchaScriptLoaded() {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    getCaptchaScriptUrl(useGlobalDomain, render, language) {\r\n        /** @type {?} */\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\nScriptService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => this.reCaptchaApi.execute(this.captchaId)));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\nInvisibleReCaptchaComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-invisible-recaptcha',\r\n                template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                providers: [\r\n                    {\r\n                        provide: NG_VALUE_ACCESSOR,\r\n                        useExisting: forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => InvisibleReCaptchaComponent)),\r\n                        multi: true,\r\n                    }\r\n                ]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nInvisibleReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nInvisibleReCaptchaComponent.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    badge: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Name of the global expire callback\r\n         */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n         * Name of the global error callback\r\n         */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Size\r\n         */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\nReCaptcha2Component.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-recaptcha2',\r\n                template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                providers: [\r\n                    {\r\n                        provide: NG_VALUE_ACCESSOR,\r\n                        useExisting: forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => ReCaptcha2Component)),\r\n                        multi: true,\r\n                    }\r\n                ]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nReCaptcha2Component.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nReCaptcha2Component.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptchaV3Service {\r\n    /**\r\n     * @param {?} scriptService\r\n     * @param {?} zone\r\n     */\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    execute(siteKey, action, callback, config) {\r\n        /** @type {?} */\r\n        const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        (grecaptcha) => {\r\n            this.zone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                grecaptcha.execute(siteKey, {\r\n                    action: action\r\n                }).then((/**\r\n                 * @param {?} token\r\n                 * @return {?}\r\n                 */\r\n                (token) => {\r\n                    this.zone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => callback(token)));\r\n                }));\r\n            }));\r\n        }));\r\n    }\r\n}\r\nReCaptchaV3Service.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nReCaptchaV3Service.ctorParameters = () => [\r\n    { type: ScriptService },\r\n    { type: NgZone }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxCaptchaModule {\r\n}\r\nNgxCaptchaModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                declarations: [\r\n                    ReCaptcha2Component,\r\n                    InvisibleReCaptchaComponent\r\n                ],\r\n                providers: [\r\n                    ScriptService,\r\n                    ReCaptchaV3Service\r\n                ],\r\n                exports: [\r\n                    ReCaptcha2Component,\r\n                    InvisibleReCaptchaComponent\r\n                ]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n//# sourceMappingURL=ngx-captcha.js.map\n","module.exports = \"<ion-content>\\n  <ion-header>\\n    <ion-toolbar>\\n      <ion-title class=\\\"popoverTitle\\\">\\n        Forgot Password\\n      </ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  <ion-row>\\n    <ion-col size=\\\"10\\\" offset=\\\"1\\\">\\n      <ion-text class=\\\"feedback\\\" >\\n        Have you forgotten your password?\\n        <br>\\n        Enter your email address to get a new one!\\n      </ion-text>\\n      <form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"onSubmitGetPassword()\\\">\\n        <ion-card class=\\\"formElement\\\" >\\n          <app-input-form\\n                  [inputForm]=\\\"forgotPasswordForm\\\" [givenName]=\\\"'email'\\\" [text]=\\\"'Email*'\\\" [validationMessages]=\\\"validationMessages.email\\\"\\n                  [type]=\\\"'email'\\\" [inputMode]=\\\"'email'\\\">\\n          </app-input-form>\\n        </ion-card>\\n        <ion-item *ngIf=\\\"messageReceived\\\" class=\\\"invalid-feedback\\\"> {{ message }}</ion-item>\\n        <ion-item class=\\\"feedback\\\" *ngIf=\\\"forgotEmailSent\\\">\\n          Check your email for further instructions.\\n        </ion-item>\\n        <ion-button class=\\\"formButton\\\" expand=\\\"block\\\" type=\\\"submit\\\"> Submit </ion-button>\\n      </form>\\n    </ion-col>\\n  </ion-row>\\n</ion-content>\\n\"","module.exports = \"<ion-content>\\n  <ion-header>\\n    <ion-toolbar color=\\\"medium\\\">\\n      <ion-title class=\\\"popoverTitle\\\">\\n        Log In\\n      </ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  <ion-row>\\n    <ion-col size=\\\"10\\\" offset=\\\"1\\\">\\n      <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmitLogin()\\\">\\n        <ion-card class=\\\"formElement\\\" >\\n          <app-input-form\\n                  [inputForm]=\\\"loginForm\\\" [givenName]=\\\"'email'\\\" [text]=\\\"'Email*'\\\" [validationMessages]=\\\"validationMessages.email\\\"\\n                  [type]=\\\"'email'\\\" [inputMode]=\\\"'email'\\\">\\n          </app-input-form>\\n        </ion-card>\\n        <ion-card class=\\\"formElement\\\" >\\n          <app-input-form\\n                  [inputForm]=\\\"loginForm\\\" [givenName]=\\\"'password'\\\" [text]=\\\"'Password*'\\\" [validationMessages]=\\\"validationMessages.password\\\"\\n                  [type]= \\\"'password'\\\" [inputMode]=\\\"'password'\\\">\\n          </app-input-form>\\n        </ion-card>\\n        <ion-item *ngIf=\\\"messageReceived\\\" class=\\\"invalid-feedback\\\"> {{ message }}\\n          <ion-button *ngIf=\\\"showResendButton\\\" class=\\\"greyButton\\\" fill=\\\"empty\\\" slot=\\\"end\\\" (click)=\\\"resendEmail()\\\">Resend</ion-button>\\n          <ion-icon *ngIf=\\\"showResentMessage\\\" class=\\\"checkmark-circle\\\" slot=\\\"end\\\" name=\\\"checkmark-circle\\\"></ion-icon>\\n          <ion-icon *ngIf=\\\"showNotResentMessage\\\" class=\\\"close-circle\\\" slot=\\\"end\\\" name=\\\"close-circle\\\"></ion-icon>\\n        </ion-item>\\n        <ion-button class=\\\"formButton\\\" expand=\\\"block\\\" type=\\\"submit\\\"> Log In </ion-button>\\n        <div class=\\\"feedback\\\" >\\n          <a href=\\\"\\\" (click)=\\\"presentForgotPopover($event)\\\" slot=\\\"end\\\" > Forgot your password? </a>\\n        </div>\\n      </form>\\n    </ion-col>\\n  </ion-row>\\n  <ion-header class=\\\"removeScrollbarForPopover\\\">\\n    <ion-toolbar color=\\\"medium\\\">\\n      <ion-title class=\\\"popoverFooter\\\">\\n        Not a member yet?\\n        <a href=\\\"\\\" (click)=\\\"presentRegistrationPopover()\\\"> Join now! </a>\\n      </ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n</ion-content>\\n\\n\"","module.exports = \"<ion-content>\\n    <ion-header>\\n        <ion-toolbar color=\\\"light\\\">\\n            <ion-title class=\\\"popoverTitle\\\" >\\n                Join now!\\n            </ion-title>\\n        </ion-toolbar>\\n    </ion-header>\\n    <ion-row>\\n        <ion-col size=\\\"10\\\" offset=\\\"1\\\">\\n            <form [formGroup]=\\\"registrationForm\\\" (ngSubmit)=\\\"onSubmitRegistration()\\\">\\n                <ion-card class=\\\"formElement\\\" >\\n                    <app-input-form\\n                            [inputForm]=\\\"registrationForm\\\" [givenName]=\\\"'email'\\\" [text]=\\\"'Email*'\\\" [validationMessages]=\\\"validationMessages.email\\\"\\n                            [type]=\\\"'email'\\\" [inputMode]=\\\"'email'\\\">\\n                    </app-input-form>\\n                </ion-card>\\n                <ion-card class=\\\"formElement\\\" >\\n                    <app-input-form\\n                            [inputForm]=\\\"registrationForm\\\" [givenName]=\\\"'password'\\\" [text]=\\\"'Password*'\\\" [validationMessages]=\\\"validationMessages.password\\\"\\n                            [type]= \\\"'password'\\\" [inputMode]=\\\"'password'\\\">\\n                    </app-input-form>\\n                </ion-card>\\n                <div *ngIf=\\\"messageReceived\\\" class=\\\"invalid-feedback\\\"> {{ message }} </div>\\n                <ion-button class=\\\"formButton\\\" expand=\\\"block\\\" type=\\\"submit\\\">Join now</ion-button>\\n            </form>\\n        </ion-col>\\n    </ion-row>\\n    <ion-header class=\\\"removeScrollbarForPopover\\\">\\n        <ion-toolbar color=\\\"medium\\\">\\n            <ion-title class=\\\"popoverFooter\\\">\\n                Already a member?\\n                <a href=\\\"\\\" (click)=\\\"presentLoginPopover($event)\\\"> Log in </a>\\n            </ion-title>\\n        </ion-toolbar>\\n    </ion-header>\\n</ion-content>\\n\"","module.exports = \"<div margin-horizontal=\\\"50px\\\">\\n    <app-top-header></app-top-header>\\n    <app-navigation-bar class=\\\"ion-hide-md-down\\\" ></app-navigation-bar>\\n</div>\\n\"","module.exports = \"<img src=\\\"assets/images/logo.png\\\">\\n\"","module.exports = \"<ion-list *ngFor=\\\"let subcategory of subcategories\\\">\\n  <ion-item [routerLink]=\\\"['/subcategory/', subcategory.slug]\\\" > {{ subcategory.name }} </ion-item>\\n</ion-list>\"","module.exports = \"<ion-toolbar (mouseleave)=\\\"dismissMenu()\\\">\\n    <ion-grid>\\n        <ion-row>\\n            <ion-col class=\\\"ion-justify-content-center\\\">\\n                <ion-segment (ionChange)=\\\"segmentChanged($event)\\\">\\n                    <ion-segment-button *ngFor=\\\"let category of categories\\\" value=\\\"{{ category.slug }}\\\" fill=\\\"clear\\\" >\\n                        <ion-label> {{ category.name }}</ion-label>\\n                    </ion-segment-button>\\n                </ion-segment>\\n            </ion-col>\\n        </ion-row>\\n    </ion-grid>\\n    <app-category-menu [subcategories]=\\\"currentMenuSubcategories\\\" *ngIf=\\\"menuVisible\\\"></app-category-menu>\\n</ion-toolbar>\\n\\n\\n\\n\"","module.exports = \"<div class=\\\"ion-float-right\\\">\\n  <ion-button *ngIf=\\\"!authService.isLoggedIn()\\\" size=\\\"small\\\" class=\\\"greyButton\\\" fill=\\\"empty\\\" (click)=\\\"presentLoginPopover()\\\">Login</ion-button>\\n  <ion-button *ngIf=\\\"!authService.isLoggedIn()\\\" size=\\\"small\\\" class=\\\"blueButton\\\" fill=\\\"empty\\\" (click)=\\\"presentRegistrationPopover()\\\" >Join</ion-button>\\n  <ion-button *ngIf=\\\"authService.isLoggedIn() && authService.isAdmin()\\\" size=\\\"small\\\" class=\\\"greyButton\\\" fill=\\\"empty\\\" (click)=\\\"router.navigateByUrl('/admin')\\\">Admin</ion-button>\\n  <ion-button *ngIf=\\\"authService.isLoggedIn()\\\" size=\\\"small\\\" class=\\\"greyButton\\\" fill=\\\"empty\\\" (click)=\\\"authService.logout()\\\"> Logout </ion-button>\\n  <ion-button *ngIf=\\\"authService.isLoggedIn()\\\" size=\\\"small\\\" class=\\\"greyButton\\\" fill=\\\"empty\\\" routerLink=\\\"/add-products\\\" [routerDirection]=\\\"'root'\\\"><ion-icon name=\\\"add\\\"></ion-icon>Add</ion-button>\\n  <ion-button *ngIf=\\\"authService.isLoggedIn()\\\" size=\\\"small\\\" class=\\\"blueButton\\\" fill=\\\"empty\\\"><ion-icon name=\\\"person\\\"></ion-icon></ion-button>\\n</div>\\n\\n\"","module.exports = \"<div>\\n        <ion-grid>\\n                <ion-row class=\\\"ion-align-items-center\\\">\\n                        <ion-col size=\\\"1\\\">\\n                                <div class=\\\"ion-hide-lg-up\\\" position=\\\"relative\\\">\\n                                        <ion-buttons slot=\\\"start\\\">\\n                                                <ion-menu-button menu=\\\"m1\\\">\\n                                                </ion-menu-button>\\n                                        </ion-buttons>\\n                                </div>\\n                        </ion-col>\\n                        <ion-col size=\\\"6\\\">\\n                                <div class=\\\"navigateHome\\\" (click)=\\\"navigateHome()\\\">\\n                                        <img padding=\\\"20px\\\" src=\\\"assets/images/logoFont6.png\\\" >\\n                                </div>\\n                        </ion-col>\\n                        <ion-col>\\n                        </ion-col>\\n                        <ion-col size=\\\"4\\\">\\n                                <app-top-header-end></app-top-header-end>\\n                        </ion-col>\\n                </ion-row>\\n        </ion-grid>\\n</div>\\n\"","module.exports = \"<ion-toolbar class=\\\"logo\\\">\\n  <ion-grid class=\\\"backgroundGradient\\\">\\n    <ion-row class=\\\"ion-align-items-center\\\">\\n      <ion-col offset=\\\"1\\\" size=\\\"3\\\">\\n        <app-logo></app-logo>\\n      </ion-col>\\n      <ion-col size=\\\"6\\\">\\n        <ion-title class=\\\"ion-no-padding\\\" >Welcome to Moln!</ion-title>\\n        <ion-text>This is the 2.71828th best event planning platform</ion-text>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"8\\\" offset=\\\"2\\\">\\n        <ion-searchbar class=\\\"ion-no-padding\\\" type=\\\"search\\\" placeholder=\\\"Search\\\"></ion-searchbar>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-toolbar>\\n\"","module.exports = \"<ion-item [formGroup]= \\\"inputForm\\\">\\n  <ion-label position=\\\"floating\\\"> {{ text }} </ion-label>\\n  <ion-input [type]= \\\"type\\\" [formControlName] = \\\"givenName\\\"  [inputmode] = \\\"inputMode\\\" ></ion-input>\\n  <ng-container *ngIf=\\\"isPassword\\\">\\n    <ion-icon *ngIf=\\\"!showingPassword\\\" name=\\\"eye\\\" slot=\\\"end\\\" (click)=\\\"showPassword(true)\\\"></ion-icon>\\n    <ion-icon *ngIf=\\\"showingPassword\\\" name=\\\"eye-off\\\" slot=\\\"end\\\" (click)=\\\"showPassword(false)\\\"></ion-icon>\\n  </ng-container>\\n  <div>\\n    <div *ngFor=\\\"let validation of validationMessages\\\">\\n      <div class=\\\"invalid-feedback\\\" *ngIf=\\\"inputForm.get(givenName).hasError(validation.type) && (inputForm.get(givenName).dirty || inputForm.get(givenName).touched)\\\">\\n        {{ validation.message + \\\"\\\\n\\\"}}\\n      </div>\\n    </div>\\n  </div>\\n</ion-item>\"","import {Input, NgModule} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { NgxCaptchaModule } from 'ngx-captcha';\nimport {InputFormModule} from '../shared/input-form.module';\n\nimport {LoginComponent} from './authentication/login/login.component';\nimport {RegistrationComponent} from './authentication/registration/registration.component';\nimport {ForgotPasswordComponent} from './authentication/forgot-password/forgot-password.component';\n\n@NgModule({\n  declarations: [LoginComponent, RegistrationComponent, ForgotPasswordComponent],\n    imports: [\n        CommonModule,\n        IonicModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NgxCaptchaModule,\n        InputFormModule\n    ],\n  exports: [LoginComponent, RegistrationComponent, ForgotPasswordComponent]\n})\nexport class AuthModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvYXV0aGVudGljYXRpb24vZm9yZ290LXBhc3N3b3JkL2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport {Validators, FormBuilder, FormGroup} from '@angular/forms';\n\nimport {AuthService} from '../../services/authService/auth.service';\nimport {first} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPasswordForm: FormGroup;\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required' },\n      { type: 'email', message: 'Not a valid address' }\n    ]\n  };\n  forgotEmailSent = false;\n  messageReceived = false;\n  message;\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private authService: AuthService,\n  ) { }\n\n  ngOnInit() {\n\n    this.forgotPasswordForm = this.formBuilder.group( {\n      email: ['', [ Validators.required, Validators.email]]\n    });\n  }\n\n  onSubmitGetPassword() {\n\n    // stop here if form is invalid\n    if (this.forgotPasswordForm.invalid) {\n      return;\n    }\n    const val = this.forgotPasswordForm.value;\n    this.authService.forgotPassword(val.email)\n        .pipe(first())\n        .subscribe(data => {\n          if (data.status === 200 ) {\n            this.forgotPasswordForm.reset();\n            this.forgotEmailSent = true;\n        }\n            }, error => {\n          if (error.status === 500) {\n            this.messageReceived = true;\n            this.forgotPasswordForm.reset();\n            this.message = 'Have you entered the correct address?';\n          }\n        });\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvYXV0aGVudGljYXRpb24vbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators, FormGroup} from '@angular/forms';\nimport {PopoverController} from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AuthService } from '../../services/authService/auth.service';\nimport {PopoverService} from '../../services/popoverService/popover.service';\nimport {ForgotPasswordComponent} from '../forgot-password/forgot-password.component';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  validationMessages = {\n      email: [\n          { type: 'required', message: 'Email is required' },\n          { type: 'email', message: 'Not a valid address' }\n      ],\n      password: [\n          { type: 'required', message: 'Password is required' },\n      ]\n  };\n  message;\n  showResendButton = false;\n  showResentMessage = false;\n  showNotResentMessage = false;\n  messageReceived = false;\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private authService: AuthService,\n      private popoverService: PopoverService,\n      private popoverController: PopoverController,\n      private router: Router) { }\n\n  ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n          email: ['', [Validators.required, Validators.email]],\n          password: ['', [Validators.required]]\n      });\n  }\n\n  resendEmail() {\n      this.authService.resendEmail()\n          .subscribe(data => {\n              this.showResentMessage = true;\n          },\n              error => {\n              this.showNotResentMessage = true;\n          });\n  }\n  onSubmitLogin() {\n\n      // stop here if form is invalid\n      if (this.loginForm.invalid) {\n          return;\n      }\n      const val = this.loginForm.value;\n      this.authService.login(val.email, val.password)\n          .pipe(first())\n          .subscribe(\n              data => {\n                  this.popoverService.dismissPopover();\n                  this.loginForm.reset();\n              },\n              error => {\n                  this.messageReceived = true;\n                  if (error.status === 401 && error.error.message === 'Authentication failed') {\n                      this.message = error.error.message;\n                  } else if (error.status === 401 && error.error.message === 'Email not verified') {\n                      this.showResendButton = true;\n                      this.message = error.error.message;\n                  } else {\n                      this.message = 'Login failed';\n                  }\n              }\n          );\n  }\n\n  async presentForgotPopover(evt) {\n      evt.preventDefault();\n      this.popoverService.dismissPopover();\n      const popover = await this.popoverController.create({\n          component: ForgotPasswordComponent,\n          translucent: true,\n          backdropDismiss: true,\n          cssClass: 'popover-style'\n      });\n      return await popover.present();\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvYXV0aGVudGljYXRpb24vcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators, FormGroup} from '@angular/forms';\nimport {first} from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport {AuthService} from '../../services/authService/auth.service';\nimport {PopoverService} from '../../services/popoverService/popover.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss'],\n})\nexport class RegistrationComponent implements OnInit {\n\n  registrationForm: FormGroup;\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required' },\n      { type: 'email', message: 'Not a valid address' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must contain 6 characters' }\n    ]\n  };\n  message;\n  messageReceived = false;\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private authService: AuthService,\n      private popoverService: PopoverService,\n      private router: Router) { }\n\n  ngOnInit() {\n\n    this.registrationForm = this.formBuilder.group( {\n      email: ['', [ Validators.required, Validators.email]],\n      password: ['', [ Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmitRegistration() {\n\n    // stop here if form is invalid\n    if (this.registrationForm.invalid) {\n      return;\n    }\n    const val = this.registrationForm.value;\n    this.authService.register(val.email, val.password)\n        .pipe(first())\n        .subscribe(\n            data => {\n              this.messageReceived = true;\n              this.registrationForm.reset();\n              this.popoverService.dismissPopover();\n              this.router.navigate(['/registered']);\n            },\n            error => {\n              this.messageReceived = true;\n              this.registrationForm.reset();\n              if (error.status === 409) {\n                this.message = error.error.message;\n              } else {\n                this.message = 'Registration failed';\n              }\n            }\n        );\n  }\n}\n","import {Input, NgModule} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {InputFormModule} from '../shared/input-form.module';\n\nimport { AuthModule } from './auth.module';\n\nimport {HeaderComponent} from './header/header.component';\nimport {TopHeaderComponent} from './header/top-header/top-header.component';\nimport {TopHeaderEndComponent} from './header/top-header/top-header-end/top-header-end.component';\nimport {NavigationBarComponent} from './header/navigation-bar/navigation-bar.component';\nimport {LogoComponent} from './header/logo/logo.component';\nimport {HomeBannerComponent} from '../pages/home/home-banner/home-banner.component';\n\nimport {LoginComponent} from './authentication/login/login.component';\nimport {RegistrationComponent} from './authentication/registration/registration.component';\nimport {ForgotPasswordComponent} from './authentication/forgot-password/forgot-password.component';\nimport {CategoryMenuComponent} from './header/navigation-bar/category-menu/category-menu.component';\n\n\n@NgModule({\n    declarations: [HeaderComponent, TopHeaderComponent, TopHeaderEndComponent,\n        NavigationBarComponent, LogoComponent, HomeBannerComponent, CategoryMenuComponent],\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputFormModule,\n    AuthModule,\n    RouterModule.forChild([\n      { path: 'login', component: LoginComponent },\n      { path: 'registration', component: RegistrationComponent },\n      { path: 'forgotPassword', component: ForgotPasswordComponent }\n    ])\n  ],\n    exports: [HeaderComponent, TopHeaderComponent, HomeBannerComponent, NavigationBarComponent, LogoComponent]\n})\nexport class HeaderModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvaGVhZGVyL2xvZ28vbG9nby5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logo',\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss'],\n})\nexport class LogoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvaGVhZGVyL25hdmlnYXRpb24tYmFyL2NhdGVnb3J5LW1lbnUvY2F0ZWdvcnktbWVudS5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, Input, OnInit} from '@angular/core';\nimport {CategoryService} from '../../../services/categoryService/category.service';\n\n@Component({\n  selector: 'app-category-menu',\n  templateUrl: './category-menu.component.html',\n  styleUrls: ['./category-menu.component.scss'],\n})\nexport class CategoryMenuComponent implements OnInit {\n  @Input() subcategories: [];\n\n  constructor(\n      private categoryService: CategoryService\n  ) { }\n\n  ngOnInit() {}\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvaGVhZGVyL25hdmlnYXRpb24tYmFyL25hdmlnYXRpb24tYmFyLmNvbXBvbmVudC5zY3NzIn0= */\"","import {Component, OnInit} from '@angular/core';\nimport {CategoryService} from '../../services/categoryService/category.service';\n\n@Component({\n  selector: 'app-navigation-bar',\n  templateUrl: './navigation-bar.component.html',\n  styleUrls: ['./navigation-bar.component.scss'],\n})\nexport class NavigationBarComponent implements OnInit {\n  categories = [];\n  menuVisible = false;\n  currentMenuSubcategories;\n  currentEvent;\n\n  constructor(\n      private categoryService: CategoryService\n  ) { }\n\n  ngOnInit() {\n    this.categoryService.getCategories().subscribe(data => {\n      // @ts-ignore\n      this.categories = data;\n    });\n  }\n\n  segmentChanged(ev: any) {\n    if (ev.target.value === '') {\n      return;\n    }\n    this.currentEvent = ev;\n    this.currentMenuSubcategories = this.categories.filter(cat => cat.slug === ev.detail.value)[0].subcategories\n        .sort((a, b) => a.name.localeCompare(b.name));\n    this.menuVisible = true;\n  }\n\n  dismissMenu() {\n    if (this.menuVisible === false) {\n      return;\n    }\n    this.currentEvent.target.value = '';\n    this.menuVisible = false;\n    this.currentMenuSubcategories = [];\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvaGVhZGVyL3RvcC1oZWFkZXIvdG9wLWhlYWRlci1lbmQvdG9wLWhlYWRlci1lbmQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\n\nimport {AuthService} from '../../../services/authService/auth.service';\nimport {PopoverService} from '../../../services/popoverService/popover.service';\nimport {LoginComponent} from '../../../authentication/login/login.component';\nimport {RegistrationComponent} from '../../../authentication/registration/registration.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-top-header-end',\n  templateUrl: './top-header-end.component.html',\n  styleUrls: ['./top-header-end.component.scss']\n})\nexport class TopHeaderEndComponent implements OnInit {\n\n  constructor(\n      private popoverController: PopoverController,\n      private authService: AuthService,\n      private popoverService: PopoverService,\n      private router: Router) { }\n\n  ngOnInit() {}\n\n  async presentLoginPopover() {\n    const popover = await this.popoverController.create({\n      component: LoginComponent,\n      translucent: true,\n      backdropDismiss: true,\n      cssClass: 'popover-style'\n    });\n    return await popover.present();\n  }\n\n  async presentRegistrationPopover() {\n    const popover = await this.popoverController.create({\n      component: RegistrationComponent,\n      translucent: true,\n      backdropDismiss: true,\n      cssClass: 'popover-style'\n    });\n    return await popover.present();\n  }\n}\n","module.exports = \".divTopHeader {\\n  height: 52px;\\n  padding-top: 3px;\\n}\\n\\n.imgSize {\\n  min-width: 10px;\\n}\\n\\n.navigateHome {\\n  cursor: pointer;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbGl2aWVyc3RhZWhsaS9Eb2N1bWVudHMvVW5pQmVybi9TZW1lc3RlcjMvSW5mb3JtYXRpay9FU0UvZXNlMjAxOS10ZWFtOS9mcm9udGVuZC9zcmMvYXBwL2NvcmUvaGVhZGVyL3RvcC1oZWFkZXIvdG9wLWhlYWRlci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvY29yZS9oZWFkZXIvdG9wLWhlYWRlci90b3AtaGVhZGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FDQ0Y7O0FERUE7RUFDRSxlQUFBO0FDQ0Y7O0FERUE7RUFDRSxlQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9jb3JlL2hlYWRlci90b3AtaGVhZGVyL3RvcC1oZWFkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZGl2VG9wSGVhZGVyIHtcbiAgaGVpZ2h0OiA1MnB4O1xuICBwYWRkaW5nLXRvcDogM3B4O1xufVxuXG4uaW1nU2l6ZXtcbiAgbWluLXdpZHRoOiAxMHB4O1xufVxuXG4ubmF2aWdhdGVIb21lIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuIiwiLmRpdlRvcEhlYWRlciB7XG4gIGhlaWdodDogNTJweDtcbiAgcGFkZGluZy10b3A6IDNweDtcbn1cblxuLmltZ1NpemUge1xuICBtaW4td2lkdGg6IDEwcHg7XG59XG5cbi5uYXZpZ2F0ZUhvbWUge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-top-header',\n  templateUrl: './top-header.component.html',\n  styleUrls: ['./top-header.component.scss'],\n})\nexport class TopHeaderComponent implements OnInit {\n\n  constructor(\n      private router: Router) { }\n\n  ngOnInit() {}\n\n  navigateHome() {\n    this.router.navigate(['/home']);\n  }\n}\n","import {ComponentFactoryResolver, Injectable} from '@angular/core';\nimport {PopoverController} from '@ionic/angular';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopoverService {\n  currentPopover;\n\n  constructor(\n      private popoverController: PopoverController,\n      private componentFactoryResolver: ComponentFactoryResolver\n  ) { }\n\n  async createPopover(comp: any) {\n    const popover = await this.popoverController.create({\n      component: comp,\n      translucent: true,\n      backdropDismiss: true,\n      cssClass: 'popover-style'\n    });\n    this.currentPopover = popover;\n    return popover;\n  }\n\n  dismissPopover() {\n    this.popoverController.dismiss();\n  }\n}\n","module.exports = \"ion-title {\\n  font-size: 30px;\\n  color: white;\\n}\\n\\nion-text {\\n  color: white;\\n}\\n\\n.backgroundGradient {\\n  background-image: -webkit-gradient(linear, left top, left bottom, from(var(--ion-color-secondary)), to(var(--ion-color-primary)));\\n  background-image: linear-gradient(var(--ion-color-secondary), var(--ion-color-primary));\\n}\\n\\nion-searchbar {\\n  box-shadow: 1px 1px 5px 2px #61f2ff;\\n  padding: 0px;\\n  margin-top: 15px;\\n  margin-bottom: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbGl2aWVyc3RhZWhsaS9Eb2N1bWVudHMvVW5pQmVybi9TZW1lc3RlcjMvSW5mb3JtYXRpay9FU0UvZXNlMjAxOS10ZWFtOS9mcm9udGVuZC9zcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS1iYW5uZXIvaG9tZS1iYW5uZXIuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS1iYW5uZXIvaG9tZS1iYW5uZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFBO0VBQ0EsWUFBQTtBQ0NGOztBREVBO0VBQ0UsWUFBQTtBQ0NGOztBREVBO0VBQ0UsaUlBQUE7RUFBQSx1RkFBQTtBQ0NGOztBREVBO0VBQ0UsbUNBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvaG9tZS9ob21lLWJhbm5lci9ob21lLWJhbm5lci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi10aXRsZXtcbiAgZm9udC1zaXplOiAzMHB4O1xuICBjb2xvcjogd2hpdGU7XG59XG5cbmlvbi10ZXh0e1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5iYWNrZ3JvdW5kR3JhZGllbnR7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KSwgdmFyKC0taW9uLWNvbG9yLXByaW1hcnkpKTtcbn1cblxuaW9uLXNlYXJjaGJhcntcbiAgYm94LXNoYWRvdzogMXB4IDFweCA1cHggMnB4ICM2MWYyZmY7XG4gIHBhZGRpbmc6IDBweDtcbiAgbWFyZ2luLXRvcDogMTVweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbiIsImlvbi10aXRsZSB7XG4gIGZvbnQtc2l6ZTogMzBweDtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG5pb24tdGV4dCB7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLmJhY2tncm91bmRHcmFkaWVudCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KSwgdmFyKC0taW9uLWNvbG9yLXByaW1hcnkpKTtcbn1cblxuaW9uLXNlYXJjaGJhciB7XG4gIGJveC1zaGFkb3c6IDFweCAxcHggNXB4IDJweCAjNjFmMmZmO1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-banner',\n  templateUrl: './home-banner.component.html',\n  styleUrls: ['./home-banner.component.scss'],\n})\nexport class HomeBannerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL2lucHV0LWZvcm0vaW5wdXQtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, Input } from '@angular/core';\nimport {FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-form',\n  templateUrl: './input-form.component.html',\n  styleUrls: ['./input-form.component.scss'],\n})\nexport class InputFormComponent implements OnInit {\n  @Input('validationMessages') validationMessages: any;\n  @Input('inputForm') inputForm: FormGroup;\n  @Input() givenName: string;\n  @Input() text: string;\n  @Input() type = 'text';\n  @Input() inputMode = 'text';\n\n  isPassword = false;\n  showingPassword = false;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.isPassword = this.type === 'password';\n  }\n\n  showPassword(bool: boolean) {\n    this.showingPassword = bool;\n    this.type = this.showingPassword ? 'text' : 'password';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport {InputFormComponent} from '../shared/components/input-form/input-form.component';\n\n\n\n@NgModule({\n  declarations: [InputFormComponent],\n  imports: [\n    CommonModule,\n      IonicModule,\n      RouterModule,\n      FormsModule,\n      ReactiveFormsModule\n  ],\n  exports: [InputFormComponent, CommonModule, FormsModule, ReactiveFormsModule]\n})\nexport class InputFormModule { }\n"],"sourceRoot":""}